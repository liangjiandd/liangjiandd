<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:context="http://www.springframework.org/schema/context"  
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd  
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd" 
	xmlns:tx="http://www.springframework.org/schema/tx">
 
    <context:component-scan base-package="com">
	    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>		
	  
	  
    <aop:aspectj-autoproxy/>
    
    <!-- 占位符所引用文件的路径 -->
	<context:property-placeholder location="classpath:datasource.properties,classpath:redis.properties" />
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${user}" />
		<property name="password" value="${pwd}" />
		<property name="maxActive" value="50" />
		<property name="maxIdle" value="10" />
		<property name="maxWait" value="3000" />
	</bean>
	
   <!-- mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.dao"></property>	
	</bean>
			
    <!-- 声明式事务管理 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 事务属性的配置 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">        
        <tx:attributes>            
            <tx:method name="select*" read-only="true"/>            
            <tx:method name="insert*" rollback-for="java.sql.SQLException"/>
            <tx:method name="update*"/>
            <tx:method name="delete*"/>
        </tx:attributes>
    </tx:advice>
    
    <aop:config>
        <aop:pointcut id="hehe" expression="execution(public * com.service..*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="hehe"/>
    </aop:config>
    
    <!-- 配置工具类 -->
      <bean class="com.redis.SpringContextUtil"></bean>
      
     <!-- redis -->
  
     <!-- jedis 配置 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig" >
          <property name="maxIdle" value="${redis.maxIdle}" />
          <property name="maxWaitMillis" value="${redis.maxWait}" />
          <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean >
    <!-- redis服务器中心 -->
    <bean id="connectionFactory"  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
          <property name="poolConfig" ref="poolConfig" />
          <property name="port" value="${redis.port}" />
          <property name="hostName" value="${redis.host}" />
          <!-- <property name="password" value="${redis.password}" /> -->
          <property name="timeout" value="${redis.timeout}" ></property>
    </bean >
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
          <property name="connectionFactory" ref="connectionFactory" />
          <property name="keySerializer" >
              <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
          </property>
          <property name="valueSerializer" >
              <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
          </property>
    </bean >
     <!-- cache配置 -->
    <bean id="methodCacheInterceptor" class="com.redis.MethodCacheInterceptor" >
          <property name="redisTemplate" ref="redisTemplate" />
    </bean >
    <bean id="updateCache" class="com.redis.UpdateCache">
    		<property name="redisTemplate" ref="redisTemplate"/>
    </bean>
    <!-- aop配置切点跟通知 -->    
    <aop:config proxy-target-class="true">
    	<!-- public 公共的
    			* 所有返回值类型
    			com.service.  service包下以及子包
    			*  所有类
    			*  所有方法
    			(..)  所有参数
    	  -->
        <aop:pointcut id="controllerMethodPointcut" expression="execution(public * com.service..*.select*(..))"/>
        <aop:advisor advice-ref="methodCacheInterceptor" pointcut-ref="controllerMethodPointcut"/>
        <aop:advisor advice-ref="updateCache" pointcut="execution(public * com.service..*.update*(..))"/>
    </aop:config>
   
</beans>